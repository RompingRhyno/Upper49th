@using Grand.Web.Models.Checkout
@model CheckoutBillingAddressModel

<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_billing_address_top" })

    @if (Model?.ExistingAddresses != null && Model.ExistingAddresses.Any())
    {
        <div class="select-billing-address">
            <div class="col-12 px-0">
                <label class="genera"
                    for="billing-address-select">@Loc["Checkout.SelectBillingAddressOrEnterNewOne"]</label>
            </div>
            <div class="col-12 px-0">
                <select name="BillingAddressId" id="billing-address-select" class="custom-select address-select"
                    onchange="onBillingAddressChange(this)">
                    @foreach (var address in Model.ExistingAddresses)
                    {
                        var addressLine = $"{address.FirstName} {address.LastName}";
                        if (address.StreetAddressEnabled && !string.IsNullOrEmpty(address.Address1))
                        {
                            addressLine += ", " + address.Address1;
                        }
                        if (address.CityEnabled && !string.IsNullOrEmpty(address.City))
                        {
                            addressLine += ", " + address.City;
                        }
                        if (address.StateProvinceEnabled && !string.IsNullOrEmpty(address.StateProvinceName))
                        {
                            addressLine += ", " + address.StateProvinceName;
                        }
                        if (address.ZipPostalCodeEnabled && !string.IsNullOrEmpty(address.ZipPostalCode))
                        {
                            addressLine += " " + address.ZipPostalCode;
                        }
                        if (address.CountryEnabled && !string.IsNullOrWhiteSpace(address.CountryName))
                        {
                            addressLine += ", " + address.CountryName;
                        }
                        <option value="@address.Id">@addressLine</option>
                    }
                    @if (Model.NewAddressPreselected)
                    {
                        <option value="" selected="selected">@Loc["Checkout.NewAddress"]</option>
                    }
                    else
                    {
                        <option value="">@Loc["Checkout.NewAddress"]</option>
                    }


                </select>
            </div>
        </div>
    }

    @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_billing_address_middle" })

    <div class="new-billing-address" id="billing-new-address-form"
        style="display:@(Model.NewAddressPreselected ? "block" : "none")">
        <div class="enter-address">
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData)
                {
                    TemplateInfo = { HtmlFieldPrefix = "BillingNewAddress" }
                };
            }
            <partial name="Partials/CreateOrUpdateAddress" model="Model.BillingNewAddress"
                view-data="dataDictAddress" />
            <div asp-validation-summary="All" class="message-error"></div>
            <div class="alert alert-danger" id="billing-address-errors" style="display:none;">
                <ul class="m-0 p-0" id="billing-address-errors-list"></ul>
            </div>
        </div>
    </div>

    @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_billing_address_bottom" })
</div>

@section Scripts {
    <script>
        function onBillingAddressChange(selectElement) {
            const isNewAddress = !selectElement.value;
            const newAddressForm = document.getElementById('billing-new-address-form');
            if (newAddressForm) {
                newAddressForm.style.display = isNewAddress ? 'block' : 'none';
            }
            clearBillingAddressErrors();
        }

        function clearBillingAddressErrors() {
            const errorContainer = document.getElementById('billing-address-errors');
            const errorList = document.getElementById('billing-address-errors-list');
            if (errorContainer && errorList) {
                errorContainer.style.display = 'none';
                errorList.innerHTML = '';
            }
        }

        function showBillingAddressErrors(errors) {
            const container = document.getElementById('billing-address-errors');
            const list = document.getElementById('billing-address-errors-list');
            list.innerHTML = '';
            if (errors && errors.length) {
                errors.forEach(msg => {
                    const li = document.createElement('li');
                    li.textContent = msg;
                    list.appendChild(li);
                });
                container.style.display = 'block';
            } else {
                container.style.display = 'none';
            }
        }
    </script>
}
